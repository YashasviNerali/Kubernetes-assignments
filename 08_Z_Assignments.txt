Learning Objectives:-
Create a ConfigMap called `candy-service-config` to store the container's configuration data.
Create a Kubernetes secret called `db-password` to store the database password.
Create the pod for the candy-service application according to the provided specification.

Problem Statement:-
Your company is nearing completion of their new mobile app, a candy-themed game. This application has some backend infrastructure the company plans to run using Kubernetes. They want to begin deploying one of their backend services to the cluster and have asked you to create a pod definition that meets the specifications required by the software. Create a pod definition in /home/cloud_user/candy-service-pod.yml, and then create a pod in the cluster using this definition to make sure it works.

The specifications are as follows:

The current image for the container is linuxacademycontent/candy-service:1. You do not need a custom command or args.
There is some configuration data the container will need:

candy.peppermint.power=100000000
candy.nougat-armor.strength=10

It will expect to find this data in a file at /etc/candy-service/candy.cfg. Store the configuration data in a ConfigMap called candy-service-config and provide it to the container as a mounted volume.
The container will need to run with the file system group with the id 2000. You will need to set this using the securityContext.
The container should expect to use 64MiB of memory and 250m CPU (use resource requests).
The container should be limited to 128MiB of memory and 500m CPU (use resource limits).
The container needs access to a database password in order to authenticate with a backend database server. The password is Kub3rn3t3sRul3s!. It should be stored in a secure fashion (as a Kubernetes secret called db-password) and passed to the container as an environment variable called DB_PASSWORD.
The container will need to access the Kubernetes API using the ServiceAccount candy-svc. The service account already exists, so just configure the pod to use it.
If you get stuck, be sure to check out the task descriptions below or the solution video. Good luck!

================================================================================================================================================================


#ConfigMap:-
	It is an Object Type
	configmap.yml

$ vi candy-service-config.yml
	
apiVersion: v1
kind: ConfigMap
metadata:
  name: candy-service-config
data:
  candy.peppermint.power: 100000000
  candy.nougat-armor.strength: 10
# Error from server (BadRequest): error when creating "candy-service-config.yml": ConfigMap in version "v1" cannot be handled as a ConfigMap: v1.ConfigMap.Data: ReadString: expects " or n, but found 1, error found in #10 byte of ...|trength":10,"candy.p|..., bigger context ...|sion":"v1","data":{"candy.nougat-armor.strength":10,"candy.peppermint.power":100000000}

OR

apiVersion: v1
kind: ConfigMap
metadata:
  name: candy-service-config
data:
 config: |-
  ---
  :candy.peppermint.power: 100000000
  :candy.nougat-armor.strength: 10
#its working


#on minion do following to add users
On Minion1:
sudo useradd -u 2020 container-user-0
sudo groupadd -g 2000 container-group-0


$ echo -n 'Kub3rn3t3sRul3s!' | base64

$ vi db-password.yml

apiVersion: v1
kind: Secret
metadata:
  name: db-password
stringData:
  mypwd: S3ViM3JuM3Qzc1J1bDNzIQ==



# main pod
$ vi candy-service.yml
apiVersion: v1
kind: Pod
metadata:
  name: candy-service
  labels:
    app: candy-webapp
spec:
  securityContext:
    fsGroup: 2000
  containers:
  - name: candy-service-ctr
    image: linuxacademycontent/candy-service:1
    command: ["sh","-c","echo cat /etc/candy-service/candy.peppermint.power"] 
    env:
    - name: db-password
      valueFrom:
        secretKeyRef:
          name: db-password
          key: mypwd
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        cpu: "500m"
        memory: "128Mi"
    volumeMounts:
    - name: candy-service-config
      mountPath: /etc/candy-service
  volumes:
  - name: candy-service-config
    configMap:
       name: candy-service-config
       items:
         - key: config
           path: candy.cfg
   
  End  
============================================================================================================================================================
self referance
security-context-pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: security-context-pod
  labels:
    app: my-app
spec:
  securityContext:
    runAsUser: 2001
    fsGroup: 3001
  containers:
  - name: my-app-ctr
    image: busybox
    command: ["sh","-c","cat /message/message.txt && sleep 3600"]
    volumeMounts:
    - name: message-volume
      mountPath: /message
  volumes:
  - name: message-volume
    hostPath:
      path: /etc/message

resource-requirement-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: resource-requirement-pod
  labels:
    app: my-app
spec:
  containers:
  - name: my-app-ctr
    image: busybox
    command: ["sh","-c","echo HelloWorld! && sleep 3600"]
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        cpu: "500m"
        memory: "128Mi"





my-secret-pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: my-secret-pod
  labels:
    app: my-app
spec:
  containers:
  - name: my-ctr
    image: busybox
    command: ["sh", "-c", "echo HelloWorld! && sleep 3600"]
    env:
    - name: my-password
      valueFrom:
        secretKeyRef:
          name: my-secret
          key: mykey
==
# Create a new encryption config file: - encryption link - https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/

apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
    - secrets
    providers:
    - aescbc:
        keys:
        - name: key1
          secret: <BASE 64 ENCODED SECRET>
    - identity: {}